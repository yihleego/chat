// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/yihleego/chat/backend/ent/chatmate"
)

// Chatmate is the model entity for the Chatmate schema.
type Chatmate struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// BizID holds the value of the "biz_id" field.
	BizID int64 `json:"biz_id,omitempty"`
	// Type holds the value of the "type" field.
	Type int32 `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// LastMessageID holds the value of the "last_message_id" field.
	LastMessageID int64 `json:"last_message_id,omitempty"`
	// LastChatTime holds the value of the "last_chat_time" field.
	LastChatTime int64 `json:"last_chat_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Chatmate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatmate.FieldID, chatmate.FieldBizID, chatmate.FieldType, chatmate.FieldLastMessageID, chatmate.FieldLastChatTime:
			values[i] = new(sql.NullInt64)
		case chatmate.FieldName, chatmate.FieldAvatar:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Chatmate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Chatmate fields.
func (c *Chatmate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatmate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int64(value.Int64)
		case chatmate.FieldBizID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field biz_id", values[i])
			} else if value.Valid {
				c.BizID = value.Int64
			}
		case chatmate.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = int32(value.Int64)
			}
		case chatmate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case chatmate.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				c.Avatar = value.String
			}
		case chatmate.FieldLastMessageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_message_id", values[i])
			} else if value.Valid {
				c.LastMessageID = value.Int64
			}
		case chatmate.FieldLastChatTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_chat_time", values[i])
			} else if value.Valid {
				c.LastChatTime = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Chatmate.
// Note that you need to call Chatmate.Unwrap() before calling this method if this Chatmate
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Chatmate) Update() *ChatmateUpdateOne {
	return (&ChatmateClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Chatmate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Chatmate) Unwrap() *Chatmate {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Chatmate is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Chatmate) String() string {
	var builder strings.Builder
	builder.WriteString("Chatmate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("biz_id=")
	builder.WriteString(fmt.Sprintf("%v", c.BizID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(c.Avatar)
	builder.WriteString(", ")
	builder.WriteString("last_message_id=")
	builder.WriteString(fmt.Sprintf("%v", c.LastMessageID))
	builder.WriteString(", ")
	builder.WriteString("last_chat_time=")
	builder.WriteString(fmt.Sprintf("%v", c.LastChatTime))
	builder.WriteByte(')')
	return builder.String()
}

// Chatmates is a parsable slice of Chatmate.
type Chatmates []*Chatmate

func (c Chatmates) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
