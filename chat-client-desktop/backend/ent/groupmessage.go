// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/yihleego/chat/backend/ent/groupmessage"
)

// GroupMessage is the model entity for the GroupMessage schema.
type GroupMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID int64 `json:"group_id,omitempty"`
	// Sender holds the value of the "sender" field.
	Sender int64 `json:"sender,omitempty"`
	// Recipient holds the value of the "recipient" field.
	Recipient int64 `json:"recipient,omitempty"`
	// Type holds the value of the "type" field.
	Type int32 `json:"type,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// SentTime holds the value of the "sent_time" field.
	SentTime int64 `json:"sent_time,omitempty"`
	// TakenTime holds the value of the "taken_time" field.
	TakenTime *int64 `json:"taken_time,omitempty"`
	// SeenTime holds the value of the "seen_time" field.
	SeenTime *int64 `json:"seen_time,omitempty"`
	// RevokedTime holds the value of the "revoked_time" field.
	RevokedTime *int64 `json:"revoked_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case groupmessage.FieldID, groupmessage.FieldGroupID, groupmessage.FieldSender, groupmessage.FieldRecipient, groupmessage.FieldType, groupmessage.FieldSentTime, groupmessage.FieldTakenTime, groupmessage.FieldSeenTime, groupmessage.FieldRevokedTime:
			values[i] = new(sql.NullInt64)
		case groupmessage.FieldContent:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GroupMessage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupMessage fields.
func (gm *GroupMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groupmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gm.ID = int64(value.Int64)
		case groupmessage.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				gm.GroupID = value.Int64
			}
		case groupmessage.FieldSender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sender", values[i])
			} else if value.Valid {
				gm.Sender = value.Int64
			}
		case groupmessage.FieldRecipient:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field recipient", values[i])
			} else if value.Valid {
				gm.Recipient = value.Int64
			}
		case groupmessage.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				gm.Type = int32(value.Int64)
			}
		case groupmessage.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				gm.Content = value.String
			}
		case groupmessage.FieldSentTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sent_time", values[i])
			} else if value.Valid {
				gm.SentTime = value.Int64
			}
		case groupmessage.FieldTakenTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field taken_time", values[i])
			} else if value.Valid {
				gm.TakenTime = new(int64)
				*gm.TakenTime = value.Int64
			}
		case groupmessage.FieldSeenTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field seen_time", values[i])
			} else if value.Valid {
				gm.SeenTime = new(int64)
				*gm.SeenTime = value.Int64
			}
		case groupmessage.FieldRevokedTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field revoked_time", values[i])
			} else if value.Valid {
				gm.RevokedTime = new(int64)
				*gm.RevokedTime = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GroupMessage.
// Note that you need to call GroupMessage.Unwrap() before calling this method if this GroupMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (gm *GroupMessage) Update() *GroupMessageUpdateOne {
	return (&GroupMessageClient{config: gm.config}).UpdateOne(gm)
}

// Unwrap unwraps the GroupMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gm *GroupMessage) Unwrap() *GroupMessage {
	_tx, ok := gm.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupMessage is not a transactional entity")
	}
	gm.config.driver = _tx.drv
	return gm
}

// String implements the fmt.Stringer.
func (gm *GroupMessage) String() string {
	var builder strings.Builder
	builder.WriteString("GroupMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gm.ID))
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", gm.GroupID))
	builder.WriteString(", ")
	builder.WriteString("sender=")
	builder.WriteString(fmt.Sprintf("%v", gm.Sender))
	builder.WriteString(", ")
	builder.WriteString("recipient=")
	builder.WriteString(fmt.Sprintf("%v", gm.Recipient))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", gm.Type))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(gm.Content)
	builder.WriteString(", ")
	builder.WriteString("sent_time=")
	builder.WriteString(fmt.Sprintf("%v", gm.SentTime))
	builder.WriteString(", ")
	if v := gm.TakenTime; v != nil {
		builder.WriteString("taken_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := gm.SeenTime; v != nil {
		builder.WriteString("seen_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := gm.RevokedTime; v != nil {
		builder.WriteString("revoked_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// GroupMessages is a parsable slice of GroupMessage.
type GroupMessages []*GroupMessage

func (gm GroupMessages) config(cfg config) {
	for _i := range gm {
		gm[_i].config = cfg
	}
}
