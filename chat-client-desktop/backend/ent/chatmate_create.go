// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yihleego/chat/backend/ent/chatmate"
)

// ChatmateCreate is the builder for creating a Chatmate entity.
type ChatmateCreate struct {
	config
	mutation *ChatmateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetBizID sets the "biz_id" field.
func (cc *ChatmateCreate) SetBizID(i int64) *ChatmateCreate {
	cc.mutation.SetBizID(i)
	return cc
}

// SetType sets the "type" field.
func (cc *ChatmateCreate) SetType(i int32) *ChatmateCreate {
	cc.mutation.SetType(i)
	return cc
}

// SetName sets the "name" field.
func (cc *ChatmateCreate) SetName(s string) *ChatmateCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetAvatar sets the "avatar" field.
func (cc *ChatmateCreate) SetAvatar(s string) *ChatmateCreate {
	cc.mutation.SetAvatar(s)
	return cc
}

// SetLastMessageID sets the "last_message_id" field.
func (cc *ChatmateCreate) SetLastMessageID(i int64) *ChatmateCreate {
	cc.mutation.SetLastMessageID(i)
	return cc
}

// SetLastChatTime sets the "last_chat_time" field.
func (cc *ChatmateCreate) SetLastChatTime(i int64) *ChatmateCreate {
	cc.mutation.SetLastChatTime(i)
	return cc
}

// SetID sets the "id" field.
func (cc *ChatmateCreate) SetID(i int64) *ChatmateCreate {
	cc.mutation.SetID(i)
	return cc
}

// Mutation returns the ChatmateMutation object of the builder.
func (cc *ChatmateCreate) Mutation() *ChatmateMutation {
	return cc.mutation
}

// Save creates the Chatmate in the database.
func (cc *ChatmateCreate) Save(ctx context.Context) (*Chatmate, error) {
	var (
		err  error
		node *Chatmate
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChatmateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Chatmate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ChatmateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChatmateCreate) SaveX(ctx context.Context) *Chatmate {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChatmateCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChatmateCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChatmateCreate) check() error {
	if _, ok := cc.mutation.BizID(); !ok {
		return &ValidationError{Name: "biz_id", err: errors.New(`ent: missing required field "Chatmate.biz_id"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Chatmate.type"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Chatmate.name"`)}
	}
	if _, ok := cc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "Chatmate.avatar"`)}
	}
	if _, ok := cc.mutation.LastMessageID(); !ok {
		return &ValidationError{Name: "last_message_id", err: errors.New(`ent: missing required field "Chatmate.last_message_id"`)}
	}
	if _, ok := cc.mutation.LastChatTime(); !ok {
		return &ValidationError{Name: "last_chat_time", err: errors.New(`ent: missing required field "Chatmate.last_chat_time"`)}
	}
	return nil
}

func (cc *ChatmateCreate) sqlSave(ctx context.Context) (*Chatmate, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (cc *ChatmateCreate) createSpec() (*Chatmate, *sqlgraph.CreateSpec) {
	var (
		_node = &Chatmate{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: chatmate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: chatmate.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.BizID(); ok {
		_spec.SetField(chatmate.FieldBizID, field.TypeInt64, value)
		_node.BizID = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(chatmate.FieldType, field.TypeInt32, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(chatmate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Avatar(); ok {
		_spec.SetField(chatmate.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := cc.mutation.LastMessageID(); ok {
		_spec.SetField(chatmate.FieldLastMessageID, field.TypeInt64, value)
		_node.LastMessageID = value
	}
	if value, ok := cc.mutation.LastChatTime(); ok {
		_spec.SetField(chatmate.FieldLastChatTime, field.TypeInt64, value)
		_node.LastChatTime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Chatmate.Create().
//		SetBizID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChatmateUpsert) {
//			SetBizID(v+v).
//		}).
//		Exec(ctx)
func (cc *ChatmateCreate) OnConflict(opts ...sql.ConflictOption) *ChatmateUpsertOne {
	cc.conflict = opts
	return &ChatmateUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Chatmate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ChatmateCreate) OnConflictColumns(columns ...string) *ChatmateUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ChatmateUpsertOne{
		create: cc,
	}
}

type (
	// ChatmateUpsertOne is the builder for "upsert"-ing
	//  one Chatmate node.
	ChatmateUpsertOne struct {
		create *ChatmateCreate
	}

	// ChatmateUpsert is the "OnConflict" setter.
	ChatmateUpsert struct {
		*sql.UpdateSet
	}
)

// SetBizID sets the "biz_id" field.
func (u *ChatmateUpsert) SetBizID(v int64) *ChatmateUpsert {
	u.Set(chatmate.FieldBizID, v)
	return u
}

// UpdateBizID sets the "biz_id" field to the value that was provided on create.
func (u *ChatmateUpsert) UpdateBizID() *ChatmateUpsert {
	u.SetExcluded(chatmate.FieldBizID)
	return u
}

// AddBizID adds v to the "biz_id" field.
func (u *ChatmateUpsert) AddBizID(v int64) *ChatmateUpsert {
	u.Add(chatmate.FieldBizID, v)
	return u
}

// SetType sets the "type" field.
func (u *ChatmateUpsert) SetType(v int32) *ChatmateUpsert {
	u.Set(chatmate.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ChatmateUpsert) UpdateType() *ChatmateUpsert {
	u.SetExcluded(chatmate.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *ChatmateUpsert) AddType(v int32) *ChatmateUpsert {
	u.Add(chatmate.FieldType, v)
	return u
}

// SetName sets the "name" field.
func (u *ChatmateUpsert) SetName(v string) *ChatmateUpsert {
	u.Set(chatmate.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ChatmateUpsert) UpdateName() *ChatmateUpsert {
	u.SetExcluded(chatmate.FieldName)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *ChatmateUpsert) SetAvatar(v string) *ChatmateUpsert {
	u.Set(chatmate.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *ChatmateUpsert) UpdateAvatar() *ChatmateUpsert {
	u.SetExcluded(chatmate.FieldAvatar)
	return u
}

// SetLastMessageID sets the "last_message_id" field.
func (u *ChatmateUpsert) SetLastMessageID(v int64) *ChatmateUpsert {
	u.Set(chatmate.FieldLastMessageID, v)
	return u
}

// UpdateLastMessageID sets the "last_message_id" field to the value that was provided on create.
func (u *ChatmateUpsert) UpdateLastMessageID() *ChatmateUpsert {
	u.SetExcluded(chatmate.FieldLastMessageID)
	return u
}

// AddLastMessageID adds v to the "last_message_id" field.
func (u *ChatmateUpsert) AddLastMessageID(v int64) *ChatmateUpsert {
	u.Add(chatmate.FieldLastMessageID, v)
	return u
}

// SetLastChatTime sets the "last_chat_time" field.
func (u *ChatmateUpsert) SetLastChatTime(v int64) *ChatmateUpsert {
	u.Set(chatmate.FieldLastChatTime, v)
	return u
}

// UpdateLastChatTime sets the "last_chat_time" field to the value that was provided on create.
func (u *ChatmateUpsert) UpdateLastChatTime() *ChatmateUpsert {
	u.SetExcluded(chatmate.FieldLastChatTime)
	return u
}

// AddLastChatTime adds v to the "last_chat_time" field.
func (u *ChatmateUpsert) AddLastChatTime(v int64) *ChatmateUpsert {
	u.Add(chatmate.FieldLastChatTime, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Chatmate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(chatmate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChatmateUpsertOne) UpdateNewValues() *ChatmateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(chatmate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Chatmate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChatmateUpsertOne) Ignore() *ChatmateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChatmateUpsertOne) DoNothing() *ChatmateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChatmateCreate.OnConflict
// documentation for more info.
func (u *ChatmateUpsertOne) Update(set func(*ChatmateUpsert)) *ChatmateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChatmateUpsert{UpdateSet: update})
	}))
	return u
}

// SetBizID sets the "biz_id" field.
func (u *ChatmateUpsertOne) SetBizID(v int64) *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.SetBizID(v)
	})
}

// AddBizID adds v to the "biz_id" field.
func (u *ChatmateUpsertOne) AddBizID(v int64) *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.AddBizID(v)
	})
}

// UpdateBizID sets the "biz_id" field to the value that was provided on create.
func (u *ChatmateUpsertOne) UpdateBizID() *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.UpdateBizID()
	})
}

// SetType sets the "type" field.
func (u *ChatmateUpsertOne) SetType(v int32) *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *ChatmateUpsertOne) AddType(v int32) *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ChatmateUpsertOne) UpdateType() *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *ChatmateUpsertOne) SetName(v string) *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ChatmateUpsertOne) UpdateName() *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.UpdateName()
	})
}

// SetAvatar sets the "avatar" field.
func (u *ChatmateUpsertOne) SetAvatar(v string) *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *ChatmateUpsertOne) UpdateAvatar() *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.UpdateAvatar()
	})
}

// SetLastMessageID sets the "last_message_id" field.
func (u *ChatmateUpsertOne) SetLastMessageID(v int64) *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.SetLastMessageID(v)
	})
}

// AddLastMessageID adds v to the "last_message_id" field.
func (u *ChatmateUpsertOne) AddLastMessageID(v int64) *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.AddLastMessageID(v)
	})
}

// UpdateLastMessageID sets the "last_message_id" field to the value that was provided on create.
func (u *ChatmateUpsertOne) UpdateLastMessageID() *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.UpdateLastMessageID()
	})
}

// SetLastChatTime sets the "last_chat_time" field.
func (u *ChatmateUpsertOne) SetLastChatTime(v int64) *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.SetLastChatTime(v)
	})
}

// AddLastChatTime adds v to the "last_chat_time" field.
func (u *ChatmateUpsertOne) AddLastChatTime(v int64) *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.AddLastChatTime(v)
	})
}

// UpdateLastChatTime sets the "last_chat_time" field to the value that was provided on create.
func (u *ChatmateUpsertOne) UpdateLastChatTime() *ChatmateUpsertOne {
	return u.Update(func(s *ChatmateUpsert) {
		s.UpdateLastChatTime()
	})
}

// Exec executes the query.
func (u *ChatmateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChatmateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChatmateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChatmateUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChatmateUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChatmateCreateBulk is the builder for creating many Chatmate entities in bulk.
type ChatmateCreateBulk struct {
	config
	builders []*ChatmateCreate
	conflict []sql.ConflictOption
}

// Save creates the Chatmate entities in the database.
func (ccb *ChatmateCreateBulk) Save(ctx context.Context) ([]*Chatmate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Chatmate, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatmateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChatmateCreateBulk) SaveX(ctx context.Context) []*Chatmate {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChatmateCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChatmateCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Chatmate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChatmateUpsert) {
//			SetBizID(v+v).
//		}).
//		Exec(ctx)
func (ccb *ChatmateCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChatmateUpsertBulk {
	ccb.conflict = opts
	return &ChatmateUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Chatmate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ChatmateCreateBulk) OnConflictColumns(columns ...string) *ChatmateUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ChatmateUpsertBulk{
		create: ccb,
	}
}

// ChatmateUpsertBulk is the builder for "upsert"-ing
// a bulk of Chatmate nodes.
type ChatmateUpsertBulk struct {
	create *ChatmateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Chatmate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(chatmate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChatmateUpsertBulk) UpdateNewValues() *ChatmateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(chatmate.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Chatmate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChatmateUpsertBulk) Ignore() *ChatmateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChatmateUpsertBulk) DoNothing() *ChatmateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChatmateCreateBulk.OnConflict
// documentation for more info.
func (u *ChatmateUpsertBulk) Update(set func(*ChatmateUpsert)) *ChatmateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChatmateUpsert{UpdateSet: update})
	}))
	return u
}

// SetBizID sets the "biz_id" field.
func (u *ChatmateUpsertBulk) SetBizID(v int64) *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.SetBizID(v)
	})
}

// AddBizID adds v to the "biz_id" field.
func (u *ChatmateUpsertBulk) AddBizID(v int64) *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.AddBizID(v)
	})
}

// UpdateBizID sets the "biz_id" field to the value that was provided on create.
func (u *ChatmateUpsertBulk) UpdateBizID() *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.UpdateBizID()
	})
}

// SetType sets the "type" field.
func (u *ChatmateUpsertBulk) SetType(v int32) *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *ChatmateUpsertBulk) AddType(v int32) *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ChatmateUpsertBulk) UpdateType() *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *ChatmateUpsertBulk) SetName(v string) *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ChatmateUpsertBulk) UpdateName() *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.UpdateName()
	})
}

// SetAvatar sets the "avatar" field.
func (u *ChatmateUpsertBulk) SetAvatar(v string) *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *ChatmateUpsertBulk) UpdateAvatar() *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.UpdateAvatar()
	})
}

// SetLastMessageID sets the "last_message_id" field.
func (u *ChatmateUpsertBulk) SetLastMessageID(v int64) *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.SetLastMessageID(v)
	})
}

// AddLastMessageID adds v to the "last_message_id" field.
func (u *ChatmateUpsertBulk) AddLastMessageID(v int64) *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.AddLastMessageID(v)
	})
}

// UpdateLastMessageID sets the "last_message_id" field to the value that was provided on create.
func (u *ChatmateUpsertBulk) UpdateLastMessageID() *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.UpdateLastMessageID()
	})
}

// SetLastChatTime sets the "last_chat_time" field.
func (u *ChatmateUpsertBulk) SetLastChatTime(v int64) *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.SetLastChatTime(v)
	})
}

// AddLastChatTime adds v to the "last_chat_time" field.
func (u *ChatmateUpsertBulk) AddLastChatTime(v int64) *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.AddLastChatTime(v)
	})
}

// UpdateLastChatTime sets the "last_chat_time" field to the value that was provided on create.
func (u *ChatmateUpsertBulk) UpdateLastChatTime() *ChatmateUpsertBulk {
	return u.Update(func(s *ChatmateUpsert) {
		s.UpdateLastChatTime()
	})
}

// Exec executes the query.
func (u *ChatmateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ChatmateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChatmateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChatmateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
