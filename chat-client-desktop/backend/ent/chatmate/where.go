// Code generated by ent, DO NOT EDIT.

package chatmate

import (
	"entgo.io/ent/dialect/sql"
	"github.com/yihleego/chat/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// BizID applies equality check predicate on the "biz_id" field. It's identical to BizIDEQ.
func BizID(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBizID), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int32) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// LastMessageID applies equality check predicate on the "last_message_id" field. It's identical to LastMessageIDEQ.
func LastMessageID(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastMessageID), v))
	})
}

// LastChatTime applies equality check predicate on the "last_chat_time" field. It's identical to LastChatTimeEQ.
func LastChatTime(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastChatTime), v))
	})
}

// BizIDEQ applies the EQ predicate on the "biz_id" field.
func BizIDEQ(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBizID), v))
	})
}

// BizIDNEQ applies the NEQ predicate on the "biz_id" field.
func BizIDNEQ(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBizID), v))
	})
}

// BizIDIn applies the In predicate on the "biz_id" field.
func BizIDIn(vs ...int64) predicate.Chatmate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBizID), v...))
	})
}

// BizIDNotIn applies the NotIn predicate on the "biz_id" field.
func BizIDNotIn(vs ...int64) predicate.Chatmate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBizID), v...))
	})
}

// BizIDGT applies the GT predicate on the "biz_id" field.
func BizIDGT(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBizID), v))
	})
}

// BizIDGTE applies the GTE predicate on the "biz_id" field.
func BizIDGTE(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBizID), v))
	})
}

// BizIDLT applies the LT predicate on the "biz_id" field.
func BizIDLT(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBizID), v))
	})
}

// BizIDLTE applies the LTE predicate on the "biz_id" field.
func BizIDLTE(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBizID), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int32) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int32) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int32) predicate.Chatmate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int32) predicate.Chatmate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int32) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int32) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int32) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int32) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Chatmate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Chatmate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvatar), v))
	})
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.Chatmate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAvatar), v...))
	})
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.Chatmate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAvatar), v...))
	})
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvatar), v))
	})
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvatar), v))
	})
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvatar), v))
	})
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvatar), v))
	})
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAvatar), v))
	})
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAvatar), v))
	})
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAvatar), v))
	})
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAvatar), v))
	})
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAvatar), v))
	})
}

// LastMessageIDEQ applies the EQ predicate on the "last_message_id" field.
func LastMessageIDEQ(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastMessageID), v))
	})
}

// LastMessageIDNEQ applies the NEQ predicate on the "last_message_id" field.
func LastMessageIDNEQ(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastMessageID), v))
	})
}

// LastMessageIDIn applies the In predicate on the "last_message_id" field.
func LastMessageIDIn(vs ...int64) predicate.Chatmate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastMessageID), v...))
	})
}

// LastMessageIDNotIn applies the NotIn predicate on the "last_message_id" field.
func LastMessageIDNotIn(vs ...int64) predicate.Chatmate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastMessageID), v...))
	})
}

// LastMessageIDGT applies the GT predicate on the "last_message_id" field.
func LastMessageIDGT(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastMessageID), v))
	})
}

// LastMessageIDGTE applies the GTE predicate on the "last_message_id" field.
func LastMessageIDGTE(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastMessageID), v))
	})
}

// LastMessageIDLT applies the LT predicate on the "last_message_id" field.
func LastMessageIDLT(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastMessageID), v))
	})
}

// LastMessageIDLTE applies the LTE predicate on the "last_message_id" field.
func LastMessageIDLTE(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastMessageID), v))
	})
}

// LastChatTimeEQ applies the EQ predicate on the "last_chat_time" field.
func LastChatTimeEQ(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastChatTime), v))
	})
}

// LastChatTimeNEQ applies the NEQ predicate on the "last_chat_time" field.
func LastChatTimeNEQ(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastChatTime), v))
	})
}

// LastChatTimeIn applies the In predicate on the "last_chat_time" field.
func LastChatTimeIn(vs ...int64) predicate.Chatmate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastChatTime), v...))
	})
}

// LastChatTimeNotIn applies the NotIn predicate on the "last_chat_time" field.
func LastChatTimeNotIn(vs ...int64) predicate.Chatmate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastChatTime), v...))
	})
}

// LastChatTimeGT applies the GT predicate on the "last_chat_time" field.
func LastChatTimeGT(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastChatTime), v))
	})
}

// LastChatTimeGTE applies the GTE predicate on the "last_chat_time" field.
func LastChatTimeGTE(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastChatTime), v))
	})
}

// LastChatTimeLT applies the LT predicate on the "last_chat_time" field.
func LastChatTimeLT(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastChatTime), v))
	})
}

// LastChatTimeLTE applies the LTE predicate on the "last_chat_time" field.
func LastChatTimeLTE(v int64) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastChatTime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chatmate) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chatmate) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chatmate) predicate.Chatmate {
	return predicate.Chatmate(func(s *sql.Selector) {
		p(s.Not())
	})
}
