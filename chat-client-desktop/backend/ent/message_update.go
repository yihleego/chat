// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yihleego/chat/backend/ent/message"
	"github.com/yihleego/chat/backend/ent/predicate"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetSender sets the "sender" field.
func (mu *MessageUpdate) SetSender(i int64) *MessageUpdate {
	mu.mutation.ResetSender()
	mu.mutation.SetSender(i)
	return mu
}

// AddSender adds i to the "sender" field.
func (mu *MessageUpdate) AddSender(i int64) *MessageUpdate {
	mu.mutation.AddSender(i)
	return mu
}

// SetRecipient sets the "recipient" field.
func (mu *MessageUpdate) SetRecipient(i int64) *MessageUpdate {
	mu.mutation.ResetRecipient()
	mu.mutation.SetRecipient(i)
	return mu
}

// AddRecipient adds i to the "recipient" field.
func (mu *MessageUpdate) AddRecipient(i int64) *MessageUpdate {
	mu.mutation.AddRecipient(i)
	return mu
}

// SetType sets the "type" field.
func (mu *MessageUpdate) SetType(i int32) *MessageUpdate {
	mu.mutation.ResetType()
	mu.mutation.SetType(i)
	return mu
}

// AddType adds i to the "type" field.
func (mu *MessageUpdate) AddType(i int32) *MessageUpdate {
	mu.mutation.AddType(i)
	return mu
}

// SetContent sets the "content" field.
func (mu *MessageUpdate) SetContent(s string) *MessageUpdate {
	mu.mutation.SetContent(s)
	return mu
}

// SetSentTime sets the "sent_time" field.
func (mu *MessageUpdate) SetSentTime(i int64) *MessageUpdate {
	mu.mutation.ResetSentTime()
	mu.mutation.SetSentTime(i)
	return mu
}

// AddSentTime adds i to the "sent_time" field.
func (mu *MessageUpdate) AddSentTime(i int64) *MessageUpdate {
	mu.mutation.AddSentTime(i)
	return mu
}

// SetTakenTime sets the "taken_time" field.
func (mu *MessageUpdate) SetTakenTime(i int64) *MessageUpdate {
	mu.mutation.ResetTakenTime()
	mu.mutation.SetTakenTime(i)
	return mu
}

// SetNillableTakenTime sets the "taken_time" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableTakenTime(i *int64) *MessageUpdate {
	if i != nil {
		mu.SetTakenTime(*i)
	}
	return mu
}

// AddTakenTime adds i to the "taken_time" field.
func (mu *MessageUpdate) AddTakenTime(i int64) *MessageUpdate {
	mu.mutation.AddTakenTime(i)
	return mu
}

// ClearTakenTime clears the value of the "taken_time" field.
func (mu *MessageUpdate) ClearTakenTime() *MessageUpdate {
	mu.mutation.ClearTakenTime()
	return mu
}

// SetSeenTime sets the "seen_time" field.
func (mu *MessageUpdate) SetSeenTime(i int64) *MessageUpdate {
	mu.mutation.ResetSeenTime()
	mu.mutation.SetSeenTime(i)
	return mu
}

// SetNillableSeenTime sets the "seen_time" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableSeenTime(i *int64) *MessageUpdate {
	if i != nil {
		mu.SetSeenTime(*i)
	}
	return mu
}

// AddSeenTime adds i to the "seen_time" field.
func (mu *MessageUpdate) AddSeenTime(i int64) *MessageUpdate {
	mu.mutation.AddSeenTime(i)
	return mu
}

// ClearSeenTime clears the value of the "seen_time" field.
func (mu *MessageUpdate) ClearSeenTime() *MessageUpdate {
	mu.mutation.ClearSeenTime()
	return mu
}

// SetRevokedTime sets the "revoked_time" field.
func (mu *MessageUpdate) SetRevokedTime(i int64) *MessageUpdate {
	mu.mutation.ResetRevokedTime()
	mu.mutation.SetRevokedTime(i)
	return mu
}

// SetNillableRevokedTime sets the "revoked_time" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableRevokedTime(i *int64) *MessageUpdate {
	if i != nil {
		mu.SetRevokedTime(*i)
	}
	return mu
}

// AddRevokedTime adds i to the "revoked_time" field.
func (mu *MessageUpdate) AddRevokedTime(i int64) *MessageUpdate {
	mu.mutation.AddRevokedTime(i)
	return mu
}

// ClearRevokedTime clears the value of the "revoked_time" field.
func (mu *MessageUpdate) ClearRevokedTime() *MessageUpdate {
	mu.mutation.ClearRevokedTime()
	return mu
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: message.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Sender(); ok {
		_spec.SetField(message.FieldSender, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedSender(); ok {
		_spec.AddField(message.FieldSender, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.Recipient(); ok {
		_spec.SetField(message.FieldRecipient, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedRecipient(); ok {
		_spec.AddField(message.FieldRecipient, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(message.FieldType, field.TypeInt32, value)
	}
	if value, ok := mu.mutation.AddedType(); ok {
		_spec.AddField(message.FieldType, field.TypeInt32, value)
	}
	if value, ok := mu.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
	}
	if value, ok := mu.mutation.SentTime(); ok {
		_spec.SetField(message.FieldSentTime, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedSentTime(); ok {
		_spec.AddField(message.FieldSentTime, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.TakenTime(); ok {
		_spec.SetField(message.FieldTakenTime, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedTakenTime(); ok {
		_spec.AddField(message.FieldTakenTime, field.TypeInt64, value)
	}
	if mu.mutation.TakenTimeCleared() {
		_spec.ClearField(message.FieldTakenTime, field.TypeInt64)
	}
	if value, ok := mu.mutation.SeenTime(); ok {
		_spec.SetField(message.FieldSeenTime, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedSeenTime(); ok {
		_spec.AddField(message.FieldSeenTime, field.TypeInt64, value)
	}
	if mu.mutation.SeenTimeCleared() {
		_spec.ClearField(message.FieldSeenTime, field.TypeInt64)
	}
	if value, ok := mu.mutation.RevokedTime(); ok {
		_spec.SetField(message.FieldRevokedTime, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedRevokedTime(); ok {
		_spec.AddField(message.FieldRevokedTime, field.TypeInt64, value)
	}
	if mu.mutation.RevokedTimeCleared() {
		_spec.ClearField(message.FieldRevokedTime, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMutation
}

// SetSender sets the "sender" field.
func (muo *MessageUpdateOne) SetSender(i int64) *MessageUpdateOne {
	muo.mutation.ResetSender()
	muo.mutation.SetSender(i)
	return muo
}

// AddSender adds i to the "sender" field.
func (muo *MessageUpdateOne) AddSender(i int64) *MessageUpdateOne {
	muo.mutation.AddSender(i)
	return muo
}

// SetRecipient sets the "recipient" field.
func (muo *MessageUpdateOne) SetRecipient(i int64) *MessageUpdateOne {
	muo.mutation.ResetRecipient()
	muo.mutation.SetRecipient(i)
	return muo
}

// AddRecipient adds i to the "recipient" field.
func (muo *MessageUpdateOne) AddRecipient(i int64) *MessageUpdateOne {
	muo.mutation.AddRecipient(i)
	return muo
}

// SetType sets the "type" field.
func (muo *MessageUpdateOne) SetType(i int32) *MessageUpdateOne {
	muo.mutation.ResetType()
	muo.mutation.SetType(i)
	return muo
}

// AddType adds i to the "type" field.
func (muo *MessageUpdateOne) AddType(i int32) *MessageUpdateOne {
	muo.mutation.AddType(i)
	return muo
}

// SetContent sets the "content" field.
func (muo *MessageUpdateOne) SetContent(s string) *MessageUpdateOne {
	muo.mutation.SetContent(s)
	return muo
}

// SetSentTime sets the "sent_time" field.
func (muo *MessageUpdateOne) SetSentTime(i int64) *MessageUpdateOne {
	muo.mutation.ResetSentTime()
	muo.mutation.SetSentTime(i)
	return muo
}

// AddSentTime adds i to the "sent_time" field.
func (muo *MessageUpdateOne) AddSentTime(i int64) *MessageUpdateOne {
	muo.mutation.AddSentTime(i)
	return muo
}

// SetTakenTime sets the "taken_time" field.
func (muo *MessageUpdateOne) SetTakenTime(i int64) *MessageUpdateOne {
	muo.mutation.ResetTakenTime()
	muo.mutation.SetTakenTime(i)
	return muo
}

// SetNillableTakenTime sets the "taken_time" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableTakenTime(i *int64) *MessageUpdateOne {
	if i != nil {
		muo.SetTakenTime(*i)
	}
	return muo
}

// AddTakenTime adds i to the "taken_time" field.
func (muo *MessageUpdateOne) AddTakenTime(i int64) *MessageUpdateOne {
	muo.mutation.AddTakenTime(i)
	return muo
}

// ClearTakenTime clears the value of the "taken_time" field.
func (muo *MessageUpdateOne) ClearTakenTime() *MessageUpdateOne {
	muo.mutation.ClearTakenTime()
	return muo
}

// SetSeenTime sets the "seen_time" field.
func (muo *MessageUpdateOne) SetSeenTime(i int64) *MessageUpdateOne {
	muo.mutation.ResetSeenTime()
	muo.mutation.SetSeenTime(i)
	return muo
}

// SetNillableSeenTime sets the "seen_time" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableSeenTime(i *int64) *MessageUpdateOne {
	if i != nil {
		muo.SetSeenTime(*i)
	}
	return muo
}

// AddSeenTime adds i to the "seen_time" field.
func (muo *MessageUpdateOne) AddSeenTime(i int64) *MessageUpdateOne {
	muo.mutation.AddSeenTime(i)
	return muo
}

// ClearSeenTime clears the value of the "seen_time" field.
func (muo *MessageUpdateOne) ClearSeenTime() *MessageUpdateOne {
	muo.mutation.ClearSeenTime()
	return muo
}

// SetRevokedTime sets the "revoked_time" field.
func (muo *MessageUpdateOne) SetRevokedTime(i int64) *MessageUpdateOne {
	muo.mutation.ResetRevokedTime()
	muo.mutation.SetRevokedTime(i)
	return muo
}

// SetNillableRevokedTime sets the "revoked_time" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableRevokedTime(i *int64) *MessageUpdateOne {
	if i != nil {
		muo.SetRevokedTime(*i)
	}
	return muo
}

// AddRevokedTime adds i to the "revoked_time" field.
func (muo *MessageUpdateOne) AddRevokedTime(i int64) *MessageUpdateOne {
	muo.mutation.AddRevokedTime(i)
	return muo
}

// ClearRevokedTime clears the value of the "revoked_time" field.
func (muo *MessageUpdateOne) ClearRevokedTime() *MessageUpdateOne {
	muo.mutation.ClearRevokedTime()
	return muo
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	var (
		err  error
		node *Message
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, muo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Message)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MessageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: message.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Sender(); ok {
		_spec.SetField(message.FieldSender, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedSender(); ok {
		_spec.AddField(message.FieldSender, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.Recipient(); ok {
		_spec.SetField(message.FieldRecipient, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedRecipient(); ok {
		_spec.AddField(message.FieldRecipient, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(message.FieldType, field.TypeInt32, value)
	}
	if value, ok := muo.mutation.AddedType(); ok {
		_spec.AddField(message.FieldType, field.TypeInt32, value)
	}
	if value, ok := muo.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
	}
	if value, ok := muo.mutation.SentTime(); ok {
		_spec.SetField(message.FieldSentTime, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedSentTime(); ok {
		_spec.AddField(message.FieldSentTime, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.TakenTime(); ok {
		_spec.SetField(message.FieldTakenTime, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedTakenTime(); ok {
		_spec.AddField(message.FieldTakenTime, field.TypeInt64, value)
	}
	if muo.mutation.TakenTimeCleared() {
		_spec.ClearField(message.FieldTakenTime, field.TypeInt64)
	}
	if value, ok := muo.mutation.SeenTime(); ok {
		_spec.SetField(message.FieldSeenTime, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedSeenTime(); ok {
		_spec.AddField(message.FieldSeenTime, field.TypeInt64, value)
	}
	if muo.mutation.SeenTimeCleared() {
		_spec.ClearField(message.FieldSeenTime, field.TypeInt64)
	}
	if value, ok := muo.mutation.RevokedTime(); ok {
		_spec.SetField(message.FieldRevokedTime, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedRevokedTime(); ok {
		_spec.AddField(message.FieldRevokedTime, field.TypeInt64, value)
	}
	if muo.mutation.RevokedTimeCleared() {
		_spec.ClearField(message.FieldRevokedTime, field.TypeInt64)
	}
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
