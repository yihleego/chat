// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/yihleego/chat/backend/ent/session"
)

// Session is the model entity for the Session schema.
type Session struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// TokenType holds the value of the "token_type" field.
	TokenType string `json:"token_type,omitempty"`
	// ExpiresIn holds the value of the "expires_in" field.
	ExpiresIn int64 `json:"expires_in,omitempty"`
	// LoginTime holds the value of the "login_time" field.
	LoginTime int64 `json:"login_time,omitempty"`
	// ExpiredTime holds the value of the "expired_time" field.
	ExpiredTime int64 `json:"expired_time,omitempty"`
	// RefreshTime holds the value of the "refresh_time" field.
	RefreshTime int64 `json:"refresh_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Session) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case session.FieldID, session.FieldUserID, session.FieldExpiresIn, session.FieldLoginTime, session.FieldExpiredTime, session.FieldRefreshTime:
			values[i] = new(sql.NullInt64)
		case session.FieldUsername, session.FieldNickname, session.FieldAvatar, session.FieldAccessToken, session.FieldTokenType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Session", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Session fields.
func (s *Session) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case session.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case session.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				s.UserID = value.Int64
			}
		case session.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				s.Username = value.String
			}
		case session.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				s.Nickname = value.String
			}
		case session.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				s.Avatar = value.String
			}
		case session.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				s.AccessToken = value.String
			}
		case session.FieldTokenType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_type", values[i])
			} else if value.Valid {
				s.TokenType = value.String
			}
		case session.FieldExpiresIn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expires_in", values[i])
			} else if value.Valid {
				s.ExpiresIn = value.Int64
			}
		case session.FieldLoginTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field login_time", values[i])
			} else if value.Valid {
				s.LoginTime = value.Int64
			}
		case session.FieldExpiredTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expired_time", values[i])
			} else if value.Valid {
				s.ExpiredTime = value.Int64
			}
		case session.FieldRefreshTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_time", values[i])
			} else if value.Valid {
				s.RefreshTime = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Session.
// Note that you need to call Session.Unwrap() before calling this method if this Session
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Session) Update() *SessionUpdateOne {
	return (&SessionClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Session entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Session) Unwrap() *Session {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Session is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Session) String() string {
	var builder strings.Builder
	builder.WriteString("Session(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UserID))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(s.Username)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(s.Nickname)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(s.Avatar)
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(s.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("token_type=")
	builder.WriteString(s.TokenType)
	builder.WriteString(", ")
	builder.WriteString("expires_in=")
	builder.WriteString(fmt.Sprintf("%v", s.ExpiresIn))
	builder.WriteString(", ")
	builder.WriteString("login_time=")
	builder.WriteString(fmt.Sprintf("%v", s.LoginTime))
	builder.WriteString(", ")
	builder.WriteString("expired_time=")
	builder.WriteString(fmt.Sprintf("%v", s.ExpiredTime))
	builder.WriteString(", ")
	builder.WriteString("refresh_time=")
	builder.WriteString(fmt.Sprintf("%v", s.RefreshTime))
	builder.WriteByte(')')
	return builder.String()
}

// Sessions is a parsable slice of Session.
type Sessions []*Session

func (s Sessions) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
