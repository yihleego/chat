// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yihleego/chat/backend/ent/groupmessage"
	"github.com/yihleego/chat/backend/ent/predicate"
)

// GroupMessageUpdate is the builder for updating GroupMessage entities.
type GroupMessageUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMessageMutation
}

// Where appends a list predicates to the GroupMessageUpdate builder.
func (gmu *GroupMessageUpdate) Where(ps ...predicate.GroupMessage) *GroupMessageUpdate {
	gmu.mutation.Where(ps...)
	return gmu
}

// SetGroupID sets the "group_id" field.
func (gmu *GroupMessageUpdate) SetGroupID(i int64) *GroupMessageUpdate {
	gmu.mutation.ResetGroupID()
	gmu.mutation.SetGroupID(i)
	return gmu
}

// AddGroupID adds i to the "group_id" field.
func (gmu *GroupMessageUpdate) AddGroupID(i int64) *GroupMessageUpdate {
	gmu.mutation.AddGroupID(i)
	return gmu
}

// SetSender sets the "sender" field.
func (gmu *GroupMessageUpdate) SetSender(i int64) *GroupMessageUpdate {
	gmu.mutation.ResetSender()
	gmu.mutation.SetSender(i)
	return gmu
}

// AddSender adds i to the "sender" field.
func (gmu *GroupMessageUpdate) AddSender(i int64) *GroupMessageUpdate {
	gmu.mutation.AddSender(i)
	return gmu
}

// SetRecipient sets the "recipient" field.
func (gmu *GroupMessageUpdate) SetRecipient(i int64) *GroupMessageUpdate {
	gmu.mutation.ResetRecipient()
	gmu.mutation.SetRecipient(i)
	return gmu
}

// AddRecipient adds i to the "recipient" field.
func (gmu *GroupMessageUpdate) AddRecipient(i int64) *GroupMessageUpdate {
	gmu.mutation.AddRecipient(i)
	return gmu
}

// SetType sets the "type" field.
func (gmu *GroupMessageUpdate) SetType(i int32) *GroupMessageUpdate {
	gmu.mutation.ResetType()
	gmu.mutation.SetType(i)
	return gmu
}

// AddType adds i to the "type" field.
func (gmu *GroupMessageUpdate) AddType(i int32) *GroupMessageUpdate {
	gmu.mutation.AddType(i)
	return gmu
}

// SetContent sets the "content" field.
func (gmu *GroupMessageUpdate) SetContent(s string) *GroupMessageUpdate {
	gmu.mutation.SetContent(s)
	return gmu
}

// SetSentTime sets the "sent_time" field.
func (gmu *GroupMessageUpdate) SetSentTime(i int64) *GroupMessageUpdate {
	gmu.mutation.ResetSentTime()
	gmu.mutation.SetSentTime(i)
	return gmu
}

// AddSentTime adds i to the "sent_time" field.
func (gmu *GroupMessageUpdate) AddSentTime(i int64) *GroupMessageUpdate {
	gmu.mutation.AddSentTime(i)
	return gmu
}

// SetTakenTime sets the "taken_time" field.
func (gmu *GroupMessageUpdate) SetTakenTime(i int64) *GroupMessageUpdate {
	gmu.mutation.ResetTakenTime()
	gmu.mutation.SetTakenTime(i)
	return gmu
}

// SetNillableTakenTime sets the "taken_time" field if the given value is not nil.
func (gmu *GroupMessageUpdate) SetNillableTakenTime(i *int64) *GroupMessageUpdate {
	if i != nil {
		gmu.SetTakenTime(*i)
	}
	return gmu
}

// AddTakenTime adds i to the "taken_time" field.
func (gmu *GroupMessageUpdate) AddTakenTime(i int64) *GroupMessageUpdate {
	gmu.mutation.AddTakenTime(i)
	return gmu
}

// ClearTakenTime clears the value of the "taken_time" field.
func (gmu *GroupMessageUpdate) ClearTakenTime() *GroupMessageUpdate {
	gmu.mutation.ClearTakenTime()
	return gmu
}

// SetSeenTime sets the "seen_time" field.
func (gmu *GroupMessageUpdate) SetSeenTime(i int64) *GroupMessageUpdate {
	gmu.mutation.ResetSeenTime()
	gmu.mutation.SetSeenTime(i)
	return gmu
}

// SetNillableSeenTime sets the "seen_time" field if the given value is not nil.
func (gmu *GroupMessageUpdate) SetNillableSeenTime(i *int64) *GroupMessageUpdate {
	if i != nil {
		gmu.SetSeenTime(*i)
	}
	return gmu
}

// AddSeenTime adds i to the "seen_time" field.
func (gmu *GroupMessageUpdate) AddSeenTime(i int64) *GroupMessageUpdate {
	gmu.mutation.AddSeenTime(i)
	return gmu
}

// ClearSeenTime clears the value of the "seen_time" field.
func (gmu *GroupMessageUpdate) ClearSeenTime() *GroupMessageUpdate {
	gmu.mutation.ClearSeenTime()
	return gmu
}

// SetRevokedTime sets the "revoked_time" field.
func (gmu *GroupMessageUpdate) SetRevokedTime(i int64) *GroupMessageUpdate {
	gmu.mutation.ResetRevokedTime()
	gmu.mutation.SetRevokedTime(i)
	return gmu
}

// SetNillableRevokedTime sets the "revoked_time" field if the given value is not nil.
func (gmu *GroupMessageUpdate) SetNillableRevokedTime(i *int64) *GroupMessageUpdate {
	if i != nil {
		gmu.SetRevokedTime(*i)
	}
	return gmu
}

// AddRevokedTime adds i to the "revoked_time" field.
func (gmu *GroupMessageUpdate) AddRevokedTime(i int64) *GroupMessageUpdate {
	gmu.mutation.AddRevokedTime(i)
	return gmu
}

// ClearRevokedTime clears the value of the "revoked_time" field.
func (gmu *GroupMessageUpdate) ClearRevokedTime() *GroupMessageUpdate {
	gmu.mutation.ClearRevokedTime()
	return gmu
}

// Mutation returns the GroupMessageMutation object of the builder.
func (gmu *GroupMessageUpdate) Mutation() *GroupMessageMutation {
	return gmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gmu *GroupMessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gmu.hooks) == 0 {
		affected, err = gmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gmu.mutation = mutation
			affected, err = gmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gmu.hooks) - 1; i >= 0; i-- {
			if gmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gmu *GroupMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := gmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gmu *GroupMessageUpdate) Exec(ctx context.Context) error {
	_, err := gmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmu *GroupMessageUpdate) ExecX(ctx context.Context) {
	if err := gmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gmu *GroupMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupmessage.Table,
			Columns: groupmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: groupmessage.FieldID,
			},
		},
	}
	if ps := gmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmu.mutation.GroupID(); ok {
		_spec.SetField(groupmessage.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.AddedGroupID(); ok {
		_spec.AddField(groupmessage.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.Sender(); ok {
		_spec.SetField(groupmessage.FieldSender, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.AddedSender(); ok {
		_spec.AddField(groupmessage.FieldSender, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.Recipient(); ok {
		_spec.SetField(groupmessage.FieldRecipient, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.AddedRecipient(); ok {
		_spec.AddField(groupmessage.FieldRecipient, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.GetType(); ok {
		_spec.SetField(groupmessage.FieldType, field.TypeInt32, value)
	}
	if value, ok := gmu.mutation.AddedType(); ok {
		_spec.AddField(groupmessage.FieldType, field.TypeInt32, value)
	}
	if value, ok := gmu.mutation.Content(); ok {
		_spec.SetField(groupmessage.FieldContent, field.TypeString, value)
	}
	if value, ok := gmu.mutation.SentTime(); ok {
		_spec.SetField(groupmessage.FieldSentTime, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.AddedSentTime(); ok {
		_spec.AddField(groupmessage.FieldSentTime, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.TakenTime(); ok {
		_spec.SetField(groupmessage.FieldTakenTime, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.AddedTakenTime(); ok {
		_spec.AddField(groupmessage.FieldTakenTime, field.TypeInt64, value)
	}
	if gmu.mutation.TakenTimeCleared() {
		_spec.ClearField(groupmessage.FieldTakenTime, field.TypeInt64)
	}
	if value, ok := gmu.mutation.SeenTime(); ok {
		_spec.SetField(groupmessage.FieldSeenTime, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.AddedSeenTime(); ok {
		_spec.AddField(groupmessage.FieldSeenTime, field.TypeInt64, value)
	}
	if gmu.mutation.SeenTimeCleared() {
		_spec.ClearField(groupmessage.FieldSeenTime, field.TypeInt64)
	}
	if value, ok := gmu.mutation.RevokedTime(); ok {
		_spec.SetField(groupmessage.FieldRevokedTime, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.AddedRevokedTime(); ok {
		_spec.AddField(groupmessage.FieldRevokedTime, field.TypeInt64, value)
	}
	if gmu.mutation.RevokedTimeCleared() {
		_spec.ClearField(groupmessage.FieldRevokedTime, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GroupMessageUpdateOne is the builder for updating a single GroupMessage entity.
type GroupMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMessageMutation
}

// SetGroupID sets the "group_id" field.
func (gmuo *GroupMessageUpdateOne) SetGroupID(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.ResetGroupID()
	gmuo.mutation.SetGroupID(i)
	return gmuo
}

// AddGroupID adds i to the "group_id" field.
func (gmuo *GroupMessageUpdateOne) AddGroupID(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.AddGroupID(i)
	return gmuo
}

// SetSender sets the "sender" field.
func (gmuo *GroupMessageUpdateOne) SetSender(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.ResetSender()
	gmuo.mutation.SetSender(i)
	return gmuo
}

// AddSender adds i to the "sender" field.
func (gmuo *GroupMessageUpdateOne) AddSender(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.AddSender(i)
	return gmuo
}

// SetRecipient sets the "recipient" field.
func (gmuo *GroupMessageUpdateOne) SetRecipient(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.ResetRecipient()
	gmuo.mutation.SetRecipient(i)
	return gmuo
}

// AddRecipient adds i to the "recipient" field.
func (gmuo *GroupMessageUpdateOne) AddRecipient(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.AddRecipient(i)
	return gmuo
}

// SetType sets the "type" field.
func (gmuo *GroupMessageUpdateOne) SetType(i int32) *GroupMessageUpdateOne {
	gmuo.mutation.ResetType()
	gmuo.mutation.SetType(i)
	return gmuo
}

// AddType adds i to the "type" field.
func (gmuo *GroupMessageUpdateOne) AddType(i int32) *GroupMessageUpdateOne {
	gmuo.mutation.AddType(i)
	return gmuo
}

// SetContent sets the "content" field.
func (gmuo *GroupMessageUpdateOne) SetContent(s string) *GroupMessageUpdateOne {
	gmuo.mutation.SetContent(s)
	return gmuo
}

// SetSentTime sets the "sent_time" field.
func (gmuo *GroupMessageUpdateOne) SetSentTime(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.ResetSentTime()
	gmuo.mutation.SetSentTime(i)
	return gmuo
}

// AddSentTime adds i to the "sent_time" field.
func (gmuo *GroupMessageUpdateOne) AddSentTime(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.AddSentTime(i)
	return gmuo
}

// SetTakenTime sets the "taken_time" field.
func (gmuo *GroupMessageUpdateOne) SetTakenTime(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.ResetTakenTime()
	gmuo.mutation.SetTakenTime(i)
	return gmuo
}

// SetNillableTakenTime sets the "taken_time" field if the given value is not nil.
func (gmuo *GroupMessageUpdateOne) SetNillableTakenTime(i *int64) *GroupMessageUpdateOne {
	if i != nil {
		gmuo.SetTakenTime(*i)
	}
	return gmuo
}

// AddTakenTime adds i to the "taken_time" field.
func (gmuo *GroupMessageUpdateOne) AddTakenTime(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.AddTakenTime(i)
	return gmuo
}

// ClearTakenTime clears the value of the "taken_time" field.
func (gmuo *GroupMessageUpdateOne) ClearTakenTime() *GroupMessageUpdateOne {
	gmuo.mutation.ClearTakenTime()
	return gmuo
}

// SetSeenTime sets the "seen_time" field.
func (gmuo *GroupMessageUpdateOne) SetSeenTime(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.ResetSeenTime()
	gmuo.mutation.SetSeenTime(i)
	return gmuo
}

// SetNillableSeenTime sets the "seen_time" field if the given value is not nil.
func (gmuo *GroupMessageUpdateOne) SetNillableSeenTime(i *int64) *GroupMessageUpdateOne {
	if i != nil {
		gmuo.SetSeenTime(*i)
	}
	return gmuo
}

// AddSeenTime adds i to the "seen_time" field.
func (gmuo *GroupMessageUpdateOne) AddSeenTime(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.AddSeenTime(i)
	return gmuo
}

// ClearSeenTime clears the value of the "seen_time" field.
func (gmuo *GroupMessageUpdateOne) ClearSeenTime() *GroupMessageUpdateOne {
	gmuo.mutation.ClearSeenTime()
	return gmuo
}

// SetRevokedTime sets the "revoked_time" field.
func (gmuo *GroupMessageUpdateOne) SetRevokedTime(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.ResetRevokedTime()
	gmuo.mutation.SetRevokedTime(i)
	return gmuo
}

// SetNillableRevokedTime sets the "revoked_time" field if the given value is not nil.
func (gmuo *GroupMessageUpdateOne) SetNillableRevokedTime(i *int64) *GroupMessageUpdateOne {
	if i != nil {
		gmuo.SetRevokedTime(*i)
	}
	return gmuo
}

// AddRevokedTime adds i to the "revoked_time" field.
func (gmuo *GroupMessageUpdateOne) AddRevokedTime(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.AddRevokedTime(i)
	return gmuo
}

// ClearRevokedTime clears the value of the "revoked_time" field.
func (gmuo *GroupMessageUpdateOne) ClearRevokedTime() *GroupMessageUpdateOne {
	gmuo.mutation.ClearRevokedTime()
	return gmuo
}

// Mutation returns the GroupMessageMutation object of the builder.
func (gmuo *GroupMessageUpdateOne) Mutation() *GroupMessageMutation {
	return gmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gmuo *GroupMessageUpdateOne) Select(field string, fields ...string) *GroupMessageUpdateOne {
	gmuo.fields = append([]string{field}, fields...)
	return gmuo
}

// Save executes the query and returns the updated GroupMessage entity.
func (gmuo *GroupMessageUpdateOne) Save(ctx context.Context) (*GroupMessage, error) {
	var (
		err  error
		node *GroupMessage
	)
	if len(gmuo.hooks) == 0 {
		node, err = gmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gmuo.mutation = mutation
			node, err = gmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gmuo.hooks) - 1; i >= 0; i-- {
			if gmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GroupMessage)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GroupMessageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gmuo *GroupMessageUpdateOne) SaveX(ctx context.Context) *GroupMessage {
	node, err := gmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gmuo *GroupMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := gmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmuo *GroupMessageUpdateOne) ExecX(ctx context.Context) {
	if err := gmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gmuo *GroupMessageUpdateOne) sqlSave(ctx context.Context) (_node *GroupMessage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupmessage.Table,
			Columns: groupmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: groupmessage.FieldID,
			},
		},
	}
	id, ok := gmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupmessage.FieldID)
		for _, f := range fields {
			if !groupmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groupmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmuo.mutation.GroupID(); ok {
		_spec.SetField(groupmessage.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.AddedGroupID(); ok {
		_spec.AddField(groupmessage.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.Sender(); ok {
		_spec.SetField(groupmessage.FieldSender, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.AddedSender(); ok {
		_spec.AddField(groupmessage.FieldSender, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.Recipient(); ok {
		_spec.SetField(groupmessage.FieldRecipient, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.AddedRecipient(); ok {
		_spec.AddField(groupmessage.FieldRecipient, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.GetType(); ok {
		_spec.SetField(groupmessage.FieldType, field.TypeInt32, value)
	}
	if value, ok := gmuo.mutation.AddedType(); ok {
		_spec.AddField(groupmessage.FieldType, field.TypeInt32, value)
	}
	if value, ok := gmuo.mutation.Content(); ok {
		_spec.SetField(groupmessage.FieldContent, field.TypeString, value)
	}
	if value, ok := gmuo.mutation.SentTime(); ok {
		_spec.SetField(groupmessage.FieldSentTime, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.AddedSentTime(); ok {
		_spec.AddField(groupmessage.FieldSentTime, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.TakenTime(); ok {
		_spec.SetField(groupmessage.FieldTakenTime, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.AddedTakenTime(); ok {
		_spec.AddField(groupmessage.FieldTakenTime, field.TypeInt64, value)
	}
	if gmuo.mutation.TakenTimeCleared() {
		_spec.ClearField(groupmessage.FieldTakenTime, field.TypeInt64)
	}
	if value, ok := gmuo.mutation.SeenTime(); ok {
		_spec.SetField(groupmessage.FieldSeenTime, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.AddedSeenTime(); ok {
		_spec.AddField(groupmessage.FieldSeenTime, field.TypeInt64, value)
	}
	if gmuo.mutation.SeenTimeCleared() {
		_spec.ClearField(groupmessage.FieldSeenTime, field.TypeInt64)
	}
	if value, ok := gmuo.mutation.RevokedTime(); ok {
		_spec.SetField(groupmessage.FieldRevokedTime, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.AddedRevokedTime(); ok {
		_spec.AddField(groupmessage.FieldRevokedTime, field.TypeInt64, value)
	}
	if gmuo.mutation.RevokedTimeCleared() {
		_spec.ClearField(groupmessage.FieldRevokedTime, field.TypeInt64)
	}
	_node = &GroupMessage{config: gmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
