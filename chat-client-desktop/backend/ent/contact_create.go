// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yihleego/chat/backend/ent/contact"
)

// ContactCreate is the builder for creating a Contact entity.
type ContactCreate struct {
	config
	mutation *ContactMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (cc *ContactCreate) SetUserID(i int64) *ContactCreate {
	cc.mutation.SetUserID(i)
	return cc
}

// SetUsername sets the "username" field.
func (cc *ContactCreate) SetUsername(s string) *ContactCreate {
	cc.mutation.SetUsername(s)
	return cc
}

// SetNickname sets the "nickname" field.
func (cc *ContactCreate) SetNickname(s string) *ContactCreate {
	cc.mutation.SetNickname(s)
	return cc
}

// SetAvatar sets the "avatar" field.
func (cc *ContactCreate) SetAvatar(s string) *ContactCreate {
	cc.mutation.SetAvatar(s)
	return cc
}

// SetID sets the "id" field.
func (cc *ContactCreate) SetID(i int64) *ContactCreate {
	cc.mutation.SetID(i)
	return cc
}

// Mutation returns the ContactMutation object of the builder.
func (cc *ContactCreate) Mutation() *ContactMutation {
	return cc.mutation
}

// Save creates the Contact in the database.
func (cc *ContactCreate) Save(ctx context.Context) (*Contact, error) {
	var (
		err  error
		node *Contact
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Contact)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ContactMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContactCreate) SaveX(ctx context.Context) *Contact {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContactCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContactCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContactCreate) check() error {
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Contact.user_id"`)}
	}
	if _, ok := cc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "Contact.username"`)}
	}
	if _, ok := cc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "Contact.nickname"`)}
	}
	if _, ok := cc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "Contact.avatar"`)}
	}
	return nil
}

func (cc *ContactCreate) sqlSave(ctx context.Context) (*Contact, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (cc *ContactCreate) createSpec() (*Contact, *sqlgraph.CreateSpec) {
	var (
		_node = &Contact{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: contact.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: contact.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.UserID(); ok {
		_spec.SetField(contact.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := cc.mutation.Username(); ok {
		_spec.SetField(contact.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := cc.mutation.Nickname(); ok {
		_spec.SetField(contact.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := cc.mutation.Avatar(); ok {
		_spec.SetField(contact.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contact.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContactUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (cc *ContactCreate) OnConflict(opts ...sql.ConflictOption) *ContactUpsertOne {
	cc.conflict = opts
	return &ContactUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ContactCreate) OnConflictColumns(columns ...string) *ContactUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ContactUpsertOne{
		create: cc,
	}
}

type (
	// ContactUpsertOne is the builder for "upsert"-ing
	//  one Contact node.
	ContactUpsertOne struct {
		create *ContactCreate
	}

	// ContactUpsert is the "OnConflict" setter.
	ContactUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *ContactUpsert) SetUserID(v int64) *ContactUpsert {
	u.Set(contact.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ContactUpsert) UpdateUserID() *ContactUpsert {
	u.SetExcluded(contact.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *ContactUpsert) AddUserID(v int64) *ContactUpsert {
	u.Add(contact.FieldUserID, v)
	return u
}

// SetUsername sets the "username" field.
func (u *ContactUpsert) SetUsername(v string) *ContactUpsert {
	u.Set(contact.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ContactUpsert) UpdateUsername() *ContactUpsert {
	u.SetExcluded(contact.FieldUsername)
	return u
}

// SetNickname sets the "nickname" field.
func (u *ContactUpsert) SetNickname(v string) *ContactUpsert {
	u.Set(contact.FieldNickname, v)
	return u
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *ContactUpsert) UpdateNickname() *ContactUpsert {
	u.SetExcluded(contact.FieldNickname)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *ContactUpsert) SetAvatar(v string) *ContactUpsert {
	u.Set(contact.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *ContactUpsert) UpdateAvatar() *ContactUpsert {
	u.SetExcluded(contact.FieldAvatar)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ContactUpsertOne) UpdateNewValues() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(contact.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ContactUpsertOne) Ignore() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContactUpsertOne) DoNothing() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContactCreate.OnConflict
// documentation for more info.
func (u *ContactUpsertOne) Update(set func(*ContactUpsert)) *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *ContactUpsertOne) SetUserID(v int64) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *ContactUpsertOne) AddUserID(v int64) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateUserID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUserID()
	})
}

// SetUsername sets the "username" field.
func (u *ContactUpsertOne) SetUsername(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateUsername() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUsername()
	})
}

// SetNickname sets the "nickname" field.
func (u *ContactUpsertOne) SetNickname(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateNickname() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateNickname()
	})
}

// SetAvatar sets the "avatar" field.
func (u *ContactUpsertOne) SetAvatar(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateAvatar() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateAvatar()
	})
}

// Exec executes the query.
func (u *ContactUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContactCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContactUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ContactUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ContactUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ContactCreateBulk is the builder for creating many Contact entities in bulk.
type ContactCreateBulk struct {
	config
	builders []*ContactCreate
	conflict []sql.ConflictOption
}

// Save creates the Contact entities in the database.
func (ccb *ContactCreateBulk) Save(ctx context.Context) ([]*Contact, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contact, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContactCreateBulk) SaveX(ctx context.Context) []*Contact {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContactCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContactCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contact.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContactUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (ccb *ContactCreateBulk) OnConflict(opts ...sql.ConflictOption) *ContactUpsertBulk {
	ccb.conflict = opts
	return &ContactUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ContactCreateBulk) OnConflictColumns(columns ...string) *ContactUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ContactUpsertBulk{
		create: ccb,
	}
}

// ContactUpsertBulk is the builder for "upsert"-ing
// a bulk of Contact nodes.
type ContactUpsertBulk struct {
	create *ContactCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ContactUpsertBulk) UpdateNewValues() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(contact.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ContactUpsertBulk) Ignore() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContactUpsertBulk) DoNothing() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContactCreateBulk.OnConflict
// documentation for more info.
func (u *ContactUpsertBulk) Update(set func(*ContactUpsert)) *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *ContactUpsertBulk) SetUserID(v int64) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *ContactUpsertBulk) AddUserID(v int64) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateUserID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUserID()
	})
}

// SetUsername sets the "username" field.
func (u *ContactUpsertBulk) SetUsername(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateUsername() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUsername()
	})
}

// SetNickname sets the "nickname" field.
func (u *ContactUpsertBulk) SetNickname(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateNickname() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateNickname()
	})
}

// SetAvatar sets the "avatar" field.
func (u *ContactUpsertBulk) SetAvatar(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateAvatar() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateAvatar()
	})
}

// Exec executes the query.
func (u *ContactUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ContactCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContactCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContactUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
