// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/yihleego/chat/backend/ent/migrate"

	"github.com/yihleego/chat/backend/ent/chatmate"
	"github.com/yihleego/chat/backend/ent/conf"
	"github.com/yihleego/chat/backend/ent/contact"
	"github.com/yihleego/chat/backend/ent/group"
	"github.com/yihleego/chat/backend/ent/groupmessage"
	"github.com/yihleego/chat/backend/ent/message"
	"github.com/yihleego/chat/backend/ent/session"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Chatmate is the client for interacting with the Chatmate builders.
	Chatmate *ChatmateClient
	// Conf is the client for interacting with the Conf builders.
	Conf *ConfClient
	// Contact is the client for interacting with the Contact builders.
	Contact *ContactClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// GroupMessage is the client for interacting with the GroupMessage builders.
	GroupMessage *GroupMessageClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Chatmate = NewChatmateClient(c.config)
	c.Conf = NewConfClient(c.config)
	c.Contact = NewContactClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.GroupMessage = NewGroupMessageClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.Session = NewSessionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Chatmate:     NewChatmateClient(cfg),
		Conf:         NewConfClient(cfg),
		Contact:      NewContactClient(cfg),
		Group:        NewGroupClient(cfg),
		GroupMessage: NewGroupMessageClient(cfg),
		Message:      NewMessageClient(cfg),
		Session:      NewSessionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Chatmate:     NewChatmateClient(cfg),
		Conf:         NewConfClient(cfg),
		Contact:      NewContactClient(cfg),
		Group:        NewGroupClient(cfg),
		GroupMessage: NewGroupMessageClient(cfg),
		Message:      NewMessageClient(cfg),
		Session:      NewSessionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Chatmate.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Chatmate.Use(hooks...)
	c.Conf.Use(hooks...)
	c.Contact.Use(hooks...)
	c.Group.Use(hooks...)
	c.GroupMessage.Use(hooks...)
	c.Message.Use(hooks...)
	c.Session.Use(hooks...)
}

// ChatmateClient is a client for the Chatmate schema.
type ChatmateClient struct {
	config
}

// NewChatmateClient returns a client for the Chatmate from the given config.
func NewChatmateClient(c config) *ChatmateClient {
	return &ChatmateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chatmate.Hooks(f(g(h())))`.
func (c *ChatmateClient) Use(hooks ...Hook) {
	c.hooks.Chatmate = append(c.hooks.Chatmate, hooks...)
}

// Create returns a builder for creating a Chatmate entity.
func (c *ChatmateClient) Create() *ChatmateCreate {
	mutation := newChatmateMutation(c.config, OpCreate)
	return &ChatmateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chatmate entities.
func (c *ChatmateClient) CreateBulk(builders ...*ChatmateCreate) *ChatmateCreateBulk {
	return &ChatmateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chatmate.
func (c *ChatmateClient) Update() *ChatmateUpdate {
	mutation := newChatmateMutation(c.config, OpUpdate)
	return &ChatmateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChatmateClient) UpdateOne(ch *Chatmate) *ChatmateUpdateOne {
	mutation := newChatmateMutation(c.config, OpUpdateOne, withChatmate(ch))
	return &ChatmateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChatmateClient) UpdateOneID(id int64) *ChatmateUpdateOne {
	mutation := newChatmateMutation(c.config, OpUpdateOne, withChatmateID(id))
	return &ChatmateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chatmate.
func (c *ChatmateClient) Delete() *ChatmateDelete {
	mutation := newChatmateMutation(c.config, OpDelete)
	return &ChatmateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChatmateClient) DeleteOne(ch *Chatmate) *ChatmateDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChatmateClient) DeleteOneID(id int64) *ChatmateDeleteOne {
	builder := c.Delete().Where(chatmate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChatmateDeleteOne{builder}
}

// Query returns a query builder for Chatmate.
func (c *ChatmateClient) Query() *ChatmateQuery {
	return &ChatmateQuery{
		config: c.config,
	}
}

// Get returns a Chatmate entity by its id.
func (c *ChatmateClient) Get(ctx context.Context, id int64) (*Chatmate, error) {
	return c.Query().Where(chatmate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChatmateClient) GetX(ctx context.Context, id int64) *Chatmate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChatmateClient) Hooks() []Hook {
	return c.hooks.Chatmate
}

// ConfClient is a client for the Conf schema.
type ConfClient struct {
	config
}

// NewConfClient returns a client for the Conf from the given config.
func NewConfClient(c config) *ConfClient {
	return &ConfClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `conf.Hooks(f(g(h())))`.
func (c *ConfClient) Use(hooks ...Hook) {
	c.hooks.Conf = append(c.hooks.Conf, hooks...)
}

// Create returns a builder for creating a Conf entity.
func (c *ConfClient) Create() *ConfCreate {
	mutation := newConfMutation(c.config, OpCreate)
	return &ConfCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Conf entities.
func (c *ConfClient) CreateBulk(builders ...*ConfCreate) *ConfCreateBulk {
	return &ConfCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Conf.
func (c *ConfClient) Update() *ConfUpdate {
	mutation := newConfMutation(c.config, OpUpdate)
	return &ConfUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConfClient) UpdateOne(co *Conf) *ConfUpdateOne {
	mutation := newConfMutation(c.config, OpUpdateOne, withConf(co))
	return &ConfUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConfClient) UpdateOneID(id string) *ConfUpdateOne {
	mutation := newConfMutation(c.config, OpUpdateOne, withConfID(id))
	return &ConfUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Conf.
func (c *ConfClient) Delete() *ConfDelete {
	mutation := newConfMutation(c.config, OpDelete)
	return &ConfDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConfClient) DeleteOne(co *Conf) *ConfDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConfClient) DeleteOneID(id string) *ConfDeleteOne {
	builder := c.Delete().Where(conf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConfDeleteOne{builder}
}

// Query returns a query builder for Conf.
func (c *ConfClient) Query() *ConfQuery {
	return &ConfQuery{
		config: c.config,
	}
}

// Get returns a Conf entity by its id.
func (c *ConfClient) Get(ctx context.Context, id string) (*Conf, error) {
	return c.Query().Where(conf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConfClient) GetX(ctx context.Context, id string) *Conf {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConfClient) Hooks() []Hook {
	return c.hooks.Conf
}

// ContactClient is a client for the Contact schema.
type ContactClient struct {
	config
}

// NewContactClient returns a client for the Contact from the given config.
func NewContactClient(c config) *ContactClient {
	return &ContactClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contact.Hooks(f(g(h())))`.
func (c *ContactClient) Use(hooks ...Hook) {
	c.hooks.Contact = append(c.hooks.Contact, hooks...)
}

// Create returns a builder for creating a Contact entity.
func (c *ContactClient) Create() *ContactCreate {
	mutation := newContactMutation(c.config, OpCreate)
	return &ContactCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Contact entities.
func (c *ContactClient) CreateBulk(builders ...*ContactCreate) *ContactCreateBulk {
	return &ContactCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Contact.
func (c *ContactClient) Update() *ContactUpdate {
	mutation := newContactMutation(c.config, OpUpdate)
	return &ContactUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContactClient) UpdateOne(co *Contact) *ContactUpdateOne {
	mutation := newContactMutation(c.config, OpUpdateOne, withContact(co))
	return &ContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContactClient) UpdateOneID(id int64) *ContactUpdateOne {
	mutation := newContactMutation(c.config, OpUpdateOne, withContactID(id))
	return &ContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Contact.
func (c *ContactClient) Delete() *ContactDelete {
	mutation := newContactMutation(c.config, OpDelete)
	return &ContactDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContactClient) DeleteOne(co *Contact) *ContactDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContactClient) DeleteOneID(id int64) *ContactDeleteOne {
	builder := c.Delete().Where(contact.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContactDeleteOne{builder}
}

// Query returns a query builder for Contact.
func (c *ContactClient) Query() *ContactQuery {
	return &ContactQuery{
		config: c.config,
	}
}

// Get returns a Contact entity by its id.
func (c *ContactClient) Get(ctx context.Context, id int64) (*Contact, error) {
	return c.Query().Where(contact.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContactClient) GetX(ctx context.Context, id int64) *Contact {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ContactClient) Hooks() []Hook {
	return c.hooks.Contact
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Create returns a builder for creating a Group entity.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id int64) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupClient) DeleteOneID(id int64) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id int64) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id int64) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// GroupMessageClient is a client for the GroupMessage schema.
type GroupMessageClient struct {
	config
}

// NewGroupMessageClient returns a client for the GroupMessage from the given config.
func NewGroupMessageClient(c config) *GroupMessageClient {
	return &GroupMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupmessage.Hooks(f(g(h())))`.
func (c *GroupMessageClient) Use(hooks ...Hook) {
	c.hooks.GroupMessage = append(c.hooks.GroupMessage, hooks...)
}

// Create returns a builder for creating a GroupMessage entity.
func (c *GroupMessageClient) Create() *GroupMessageCreate {
	mutation := newGroupMessageMutation(c.config, OpCreate)
	return &GroupMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupMessage entities.
func (c *GroupMessageClient) CreateBulk(builders ...*GroupMessageCreate) *GroupMessageCreateBulk {
	return &GroupMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupMessage.
func (c *GroupMessageClient) Update() *GroupMessageUpdate {
	mutation := newGroupMessageMutation(c.config, OpUpdate)
	return &GroupMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupMessageClient) UpdateOne(gm *GroupMessage) *GroupMessageUpdateOne {
	mutation := newGroupMessageMutation(c.config, OpUpdateOne, withGroupMessage(gm))
	return &GroupMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupMessageClient) UpdateOneID(id int64) *GroupMessageUpdateOne {
	mutation := newGroupMessageMutation(c.config, OpUpdateOne, withGroupMessageID(id))
	return &GroupMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupMessage.
func (c *GroupMessageClient) Delete() *GroupMessageDelete {
	mutation := newGroupMessageMutation(c.config, OpDelete)
	return &GroupMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupMessageClient) DeleteOne(gm *GroupMessage) *GroupMessageDeleteOne {
	return c.DeleteOneID(gm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupMessageClient) DeleteOneID(id int64) *GroupMessageDeleteOne {
	builder := c.Delete().Where(groupmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupMessageDeleteOne{builder}
}

// Query returns a query builder for GroupMessage.
func (c *GroupMessageClient) Query() *GroupMessageQuery {
	return &GroupMessageQuery{
		config: c.config,
	}
}

// Get returns a GroupMessage entity by its id.
func (c *GroupMessageClient) Get(ctx context.Context, id int64) (*GroupMessage, error) {
	return c.Query().Where(groupmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupMessageClient) GetX(ctx context.Context, id int64) *GroupMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GroupMessageClient) Hooks() []Hook {
	return c.hooks.GroupMessage
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Create returns a builder for creating a Message entity.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id int64) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageClient) DeleteOneID(id int64) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id int64) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id int64) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id int64) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id int64) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id int64) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id int64) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}
